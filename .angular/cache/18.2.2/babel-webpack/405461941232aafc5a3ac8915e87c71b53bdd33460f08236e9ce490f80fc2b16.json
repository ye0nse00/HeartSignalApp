{"ast":null,"code":"import _asyncToGenerator from \"D:/Heart/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { p as printIonWarning } from './index6.js';\nimport { b as getIonMode } from './ionic-global.js';\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nconst IonAccordionGroupIosStyle0 = accordionGroupIosCss;\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-end-end-radius:6px;border-end-start-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-start-start-radius:6px;border-start-end-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nconst IonAccordionGroupMdStyle0 = accordionGroupMdCss;\nconst AccordionGroup = /*@__PURE__*/proxyCustomElement(class AccordionGroup extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n    this.animated = true;\n    this.multiple = undefined;\n    this.value = undefined;\n    this.disabled = false;\n    this.readonly = false;\n    this.expand = 'compact';\n  }\n  valueChanged() {\n    const {\n      value,\n      multiple\n    } = this;\n    if (!multiple && Array.isArray(value)) {\n      /**\n       * We do some processing on the `value` array so\n       * that it looks more like an array when logged to\n       * the console.\n       * Example given ['a', 'b']\n       * Default toString() behavior: a,b\n       * Custom behavior: ['a', 'b']\n       */\n      printIonWarning(`ion-accordion-group was passed an array of values, but multiple=\"false\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \"value\" property when multiple=\"false\".\n\n  Value Passed: [${value.map(v => `'${v}'`).join(', ')}]\n`, this.el);\n    }\n    /**\n     * Do not use `value` here as that will be\n     * not account for the adjustment we make above.\n     */\n    this.ionValueChange.emit({\n      value: this.value\n    });\n  }\n  disabledChanged() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        disabled\n      } = _this;\n      const accordions = yield _this.getAccordions();\n      for (const accordion of accordions) {\n        accordion.disabled = disabled;\n      }\n    })();\n  }\n  readonlyChanged() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        readonly\n      } = _this2;\n      const accordions = yield _this2.getAccordions();\n      for (const accordion of accordions) {\n        accordion.readonly = readonly;\n      }\n    })();\n  }\n  onKeydown(ev) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const activeElement = document.activeElement;\n      if (!activeElement) {\n        return;\n      }\n      /**\n       * Make sure focus is in the header, not the body, of the accordion. This ensures\n       * that if there are any interactable elements in the body, their keyboard\n       * interaction doesn't get stolen by the accordion. Example: using up/down keys\n       * in ion-textarea.\n       */\n      const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n      if (!activeAccordionHeader) {\n        return;\n      }\n      const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n      if (!accordionEl) {\n        return;\n      }\n      const closestGroup = accordionEl.closest('ion-accordion-group');\n      if (closestGroup !== _this3.el) {\n        return;\n      }\n      // If the active accordion is not in the current array of accordions, do not do anything\n      const accordions = yield _this3.getAccordions();\n      const startingIndex = accordions.findIndex(a => a === accordionEl);\n      if (startingIndex === -1) {\n        return;\n      }\n      let accordion;\n      if (ev.key === 'ArrowDown') {\n        accordion = _this3.findNextAccordion(accordions, startingIndex);\n      } else if (ev.key === 'ArrowUp') {\n        accordion = _this3.findPreviousAccordion(accordions, startingIndex);\n      } else if (ev.key === 'Home') {\n        accordion = accordions[0];\n      } else if (ev.key === 'End') {\n        accordion = accordions[accordions.length - 1];\n      }\n      if (accordion !== undefined && accordion !== activeElement) {\n        accordion.focus();\n      }\n    })();\n  }\n  componentDidLoad() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.disabled) {\n        _this4.disabledChanged();\n      }\n      if (_this4.readonly) {\n        _this4.readonlyChanged();\n      }\n      /**\n       * When binding values in frameworks such as Angular\n       * it is possible for the value to be set after the Web Component\n       * initializes but before the value watcher is set up in Stencil.\n       * As a result, the watcher callback may not be fired.\n       * We work around this by manually calling the watcher\n       * callback when the component has loaded and the watcher\n       * is configured.\n       */\n      _this4.valueChanged();\n    })();\n  }\n  /**\n   * Sets the value property and emits ionChange.\n   * This should only be called when the user interacts\n   * with the accordion and not for any update\n   * to the value property. The exception is when\n   * the app sets the value of a single-select\n   * accordion group to an array.\n   */\n  setValue(accordionValue) {\n    const value = this.value = accordionValue;\n    this.ionChange.emit({\n      value\n    });\n  }\n  /**\n   * This method is used to ensure that the value\n   * of ion-accordion-group is being set in a valid\n   * way. This method should only be called in\n   * response to a user generated action.\n   * @internal\n   */\n  requestAccordionToggle(accordionValue, accordionExpand) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        multiple,\n        value,\n        readonly,\n        disabled\n      } = _this5;\n      if (readonly || disabled) {\n        return;\n      }\n      if (accordionExpand) {\n        /**\n         * If group accepts multiple values\n         * check to see if value is already in\n         * in values array. If not, add it\n         * to the array.\n         */\n        if (multiple) {\n          const groupValue = value !== null && value !== void 0 ? value : [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          const valueExists = processedValue.find(v => v === accordionValue);\n          if (valueExists === undefined && accordionValue !== undefined) {\n            _this5.setValue([...processedValue, accordionValue]);\n          }\n        } else {\n          _this5.setValue(accordionValue);\n        }\n      } else {\n        /**\n         * If collapsing accordion, either filter the value\n         * out of the values array or unset the value.\n         */\n        if (multiple) {\n          const groupValue = value !== null && value !== void 0 ? value : [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          _this5.setValue(processedValue.filter(v => v !== accordionValue));\n        } else {\n          _this5.setValue(undefined);\n        }\n      }\n    })();\n  }\n  findNextAccordion(accordions, startingIndex) {\n    const nextAccordion = accordions[startingIndex + 1];\n    if (nextAccordion === undefined) {\n      return accordions[0];\n    }\n    return nextAccordion;\n  }\n  findPreviousAccordion(accordions, startingIndex) {\n    const prevAccordion = accordions[startingIndex - 1];\n    if (prevAccordion === undefined) {\n      return accordions[accordions.length - 1];\n    }\n    return prevAccordion;\n  }\n  /**\n   * @internal\n   */\n  getAccordions() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return Array.from(_this6.el.querySelectorAll(':scope > ion-accordion'));\n    })();\n  }\n  render() {\n    const {\n      disabled,\n      readonly,\n      expand\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: '82f3e77066fabb4736638ee4c487ad56efd39c63',\n      class: {\n        [mode]: true,\n        'accordion-group-disabled': disabled,\n        'accordion-group-readonly': readonly,\n        [`accordion-group-expand-${expand}`]: true\n      },\n      role: \"presentation\"\n    }, h(\"slot\", {\n      key: 'a3c791ea887fc640b512f81d429be465ae902b3d'\n    }));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"],\n      \"readonly\": [\"readonlyChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: IonAccordionGroupIosStyle0,\n      md: IonAccordionGroupMdStyle0\n    };\n  }\n}, [33, \"ion-accordion-group\", {\n  \"animated\": [4],\n  \"multiple\": [4],\n  \"value\": [1025],\n  \"disabled\": [4],\n  \"readonly\": [4],\n  \"expand\": [1],\n  \"requestAccordionToggle\": [64],\n  \"getAccordions\": [64]\n}, [[0, \"keydown\", \"onKeydown\"]], {\n  \"value\": [\"valueChanged\"],\n  \"disabled\": [\"disabledChanged\"],\n  \"readonly\": [\"readonlyChanged\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-accordion-group\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-accordion-group\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, AccordionGroup);\n        }\n        break;\n    }\n  });\n}\nconst IonAccordionGroup = AccordionGroup;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonAccordionGroup, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}