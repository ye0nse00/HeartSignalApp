{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, forceUpdate, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nconst SIZE_TO_MEDIA = {\n  xs: '(min-width: 0px)',\n  sm: '(min-width: 576px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 992px)',\n  xl: '(min-width: 1200px)'\n};\n// Check if the window matches the media query\n// at the breakpoint passed\n// e.g. matchBreakpoint('sm') => true if screen width exceeds 576px\nconst matchBreakpoint = breakpoint => {\n  if (breakpoint === undefined || breakpoint === '') {\n    return true;\n  }\n  if (window.matchMedia) {\n    const mediaQuery = SIZE_TO_MEDIA[breakpoint];\n    return window.matchMedia(mediaQuery).matches;\n  }\n  return false;\n};\nconst colCss = \":host{-webkit-padding-start:var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));padding-inline-start:var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));-webkit-padding-end:var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));padding-inline-end:var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));padding-top:var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));padding-bottom:var(--ion-grid-column-padding-xs, var(--ion-grid-column-padding, 5px));margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;width:100%;max-width:100%;min-height:1px}@media (min-width: 576px){:host{-webkit-padding-start:var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));padding-inline-start:var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));-webkit-padding-end:var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));padding-inline-end:var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));padding-top:var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px));padding-bottom:var(--ion-grid-column-padding-sm, var(--ion-grid-column-padding, 5px))}}@media (min-width: 768px){:host{-webkit-padding-start:var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));padding-inline-start:var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));-webkit-padding-end:var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));padding-inline-end:var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));padding-top:var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px));padding-bottom:var(--ion-grid-column-padding-md, var(--ion-grid-column-padding, 5px))}}@media (min-width: 992px){:host{-webkit-padding-start:var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));padding-inline-start:var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));-webkit-padding-end:var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));padding-inline-end:var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));padding-top:var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px));padding-bottom:var(--ion-grid-column-padding-lg, var(--ion-grid-column-padding, 5px))}}@media (min-width: 1200px){:host{-webkit-padding-start:var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));padding-inline-start:var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));-webkit-padding-end:var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));padding-inline-end:var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));padding-top:var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px));padding-bottom:var(--ion-grid-column-padding-xl, var(--ion-grid-column-padding, 5px))}}\";\nconst IonColStyle0 = colCss;\nconst win = typeof window !== 'undefined' ? window : undefined;\n// eslint-disable-next-line @typescript-eslint/prefer-optional-chain\nconst SUPPORTS_VARS = win && !!(win.CSS && win.CSS.supports && win.CSS.supports('--a: 0'));\nconst BREAKPOINTS = ['', 'xs', 'sm', 'md', 'lg', 'xl'];\nconst Col = /*@__PURE__*/proxyCustomElement(class Col extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.offset = undefined;\n    this.offsetXs = undefined;\n    this.offsetSm = undefined;\n    this.offsetMd = undefined;\n    this.offsetLg = undefined;\n    this.offsetXl = undefined;\n    this.pull = undefined;\n    this.pullXs = undefined;\n    this.pullSm = undefined;\n    this.pullMd = undefined;\n    this.pullLg = undefined;\n    this.pullXl = undefined;\n    this.push = undefined;\n    this.pushXs = undefined;\n    this.pushSm = undefined;\n    this.pushMd = undefined;\n    this.pushLg = undefined;\n    this.pushXl = undefined;\n    this.size = undefined;\n    this.sizeXs = undefined;\n    this.sizeSm = undefined;\n    this.sizeMd = undefined;\n    this.sizeLg = undefined;\n    this.sizeXl = undefined;\n  }\n  onResize() {\n    forceUpdate(this);\n  }\n  // Loop through all of the breakpoints to see if the media query\n  // matches and grab the column value from the relevant prop if so\n  getColumns(property) {\n    let matched;\n    for (const breakpoint of BREAKPOINTS) {\n      const matches = matchBreakpoint(breakpoint);\n      // Grab the value of the property, if it exists and our\n      // media query matches we return the value\n      const columns = this[property + breakpoint.charAt(0).toUpperCase() + breakpoint.slice(1)];\n      if (matches && columns !== undefined) {\n        matched = columns;\n      }\n    }\n    // Return the last matched columns since the breakpoints\n    // increase in size and we want to return the largest match\n    return matched;\n  }\n  calculateSize() {\n    const columns = this.getColumns('size');\n    // If size wasn't set for any breakpoint\n    // or if the user set the size without a value\n    // it means we need to stick with the default and return\n    // e.g. <ion-col size-md>\n    if (!columns || columns === '') {\n      return;\n    }\n    // If the size is set to auto then don't calculate a size\n    const colSize = columns === 'auto' ? 'auto' :\n    // If CSS supports variables we should use the grid columns var\n    SUPPORTS_VARS ? `calc(calc(${columns} / var(--ion-grid-columns, 12)) * 100%)` :\n    // Convert the columns to a percentage by dividing by the total number\n    // of columns (12) and then multiplying by 100\n    columns / 12 * 100 + '%';\n    return {\n      flex: `0 0 ${colSize}`,\n      width: `${colSize}`,\n      'max-width': `${colSize}`\n    };\n  }\n  // Called by push, pull, and offset since they use the same calculations\n  calculatePosition(property, modifier) {\n    const columns = this.getColumns(property);\n    if (!columns) {\n      return;\n    }\n    // If the number of columns passed are greater than 0 and less than\n    // 12 we can position the column, else default to auto\n    const amount = SUPPORTS_VARS ?\n    // If CSS supports variables we should use the grid columns var\n    `calc(calc(${columns} / var(--ion-grid-columns, 12)) * 100%)` :\n    // Convert the columns to a percentage by dividing by the total number\n    // of columns (12) and then multiplying by 100\n    columns > 0 && columns < 12 ? columns / 12 * 100 + '%' : 'auto';\n    return {\n      [modifier]: amount\n    };\n  }\n  calculateOffset(isRTL) {\n    return this.calculatePosition('offset', isRTL ? 'margin-right' : 'margin-left');\n  }\n  calculatePull(isRTL) {\n    return this.calculatePosition('pull', isRTL ? 'left' : 'right');\n  }\n  calculatePush(isRTL) {\n    return this.calculatePosition('push', isRTL ? 'right' : 'left');\n  }\n  render() {\n    const isRTL = document.dir === 'rtl';\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'c37fa4c4c993385ccbb6f4e89b2f390b140507a0',\n      class: {\n        [mode]: true\n      },\n      style: Object.assign(Object.assign(Object.assign(Object.assign({}, this.calculateOffset(isRTL)), this.calculatePull(isRTL)), this.calculatePush(isRTL)), this.calculateSize())\n    }, h(\"slot\", {\n      key: '6a5296ff0b9dee6600c2dafe7363a065d053bac2'\n    }));\n  }\n  static get style() {\n    return IonColStyle0;\n  }\n}, [1, \"ion-col\", {\n  \"offset\": [1],\n  \"offsetXs\": [1, \"offset-xs\"],\n  \"offsetSm\": [1, \"offset-sm\"],\n  \"offsetMd\": [1, \"offset-md\"],\n  \"offsetLg\": [1, \"offset-lg\"],\n  \"offsetXl\": [1, \"offset-xl\"],\n  \"pull\": [1],\n  \"pullXs\": [1, \"pull-xs\"],\n  \"pullSm\": [1, \"pull-sm\"],\n  \"pullMd\": [1, \"pull-md\"],\n  \"pullLg\": [1, \"pull-lg\"],\n  \"pullXl\": [1, \"pull-xl\"],\n  \"push\": [1],\n  \"pushXs\": [1, \"push-xs\"],\n  \"pushSm\": [1, \"push-sm\"],\n  \"pushMd\": [1, \"push-md\"],\n  \"pushLg\": [1, \"push-lg\"],\n  \"pushXl\": [1, \"push-xl\"],\n  \"size\": [1],\n  \"sizeXs\": [1, \"size-xs\"],\n  \"sizeSm\": [1, \"size-sm\"],\n  \"sizeMd\": [1, \"size-md\"],\n  \"sizeLg\": [1, \"size-lg\"],\n  \"sizeXl\": [1, \"size-xl\"]\n}, [[9, \"resize\", \"onResize\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-col\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-col\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Col);\n        }\n        break;\n    }\n  });\n}\nconst IonCol = Col;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonCol, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}