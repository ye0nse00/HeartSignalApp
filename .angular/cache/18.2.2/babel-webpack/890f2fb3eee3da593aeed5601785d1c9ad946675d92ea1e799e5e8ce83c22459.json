{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { c as createColorClasses } from './theme.js';\nimport { b as getIonMode } from './ionic-global.js';\nconst textCss = \":host(.ion-color){color:var(--ion-color-base)}\";\nconst IonTextStyle0 = textCss;\nconst Text = /*@__PURE__*/proxyCustomElement(class Text extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.color = undefined;\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: '4b76333b1ea5cab134b9dc1f5670c0d5a253fc32',\n      class: createColorClasses(this.color, {\n        [mode]: true\n      })\n    }, h(\"slot\", {\n      key: '3dee5f16bc58b3d92547d910bd4f441a00ce2039'\n    }));\n  }\n  static get style() {\n    return IonTextStyle0;\n  }\n}, [1, \"ion-text\", {\n  \"color\": [513]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-text\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-text\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Text);\n        }\n        break;\n    }\n  });\n}\nconst IonText = Text;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonText, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}