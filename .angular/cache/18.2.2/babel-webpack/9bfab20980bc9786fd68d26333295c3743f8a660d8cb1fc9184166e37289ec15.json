{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nimport { b as getIonMode } from './ionic-global.js';\nconst breadcrumbsIosCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px;padding-top:0;padding-bottom:0;-ms-flex-pack:center;justify-content:center}\";\nconst IonBreadcrumbsIosStyle0 = breadcrumbsIosCss;\nconst breadcrumbsMdCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:0;padding-bottom:0}\";\nconst IonBreadcrumbsMdStyle0 = breadcrumbsMdCss;\nconst Breadcrumbs = /*@__PURE__*/proxyCustomElement(class Breadcrumbs extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionCollapsedClick = createEvent(this, \"ionCollapsedClick\", 7);\n    this.breadcrumbsInit = () => {\n      this.setBreadcrumbSeparator();\n      this.setMaxItems();\n    };\n    this.resetActiveBreadcrumb = () => {\n      const breadcrumbs = this.getBreadcrumbs();\n      // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n      const activeBreadcrumb = breadcrumbs.find(breadcrumb => breadcrumb.active);\n      if (activeBreadcrumb && this.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n    this.setMaxItems = () => {\n      const {\n        itemsAfterCollapse,\n        itemsBeforeCollapse,\n        maxItems\n      } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      for (const breadcrumb of breadcrumbs) {\n        breadcrumb.showCollapsedIndicator = false;\n        breadcrumb.collapsed = false;\n      }\n      // If the number of breadcrumbs exceeds the maximum number of items\n      // that should show and the items before / after collapse do not\n      // exceed the maximum items then we need to collapse the breadcrumbs\n      const shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach((breadcrumb, index) => {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          }\n          // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n    this.setBreadcrumbSeparator = () => {\n      const {\n        itemsAfterCollapse,\n        itemsBeforeCollapse,\n        maxItems\n      } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      // Check if an active breadcrumb exists already\n      const active = breadcrumbs.find(breadcrumb => breadcrumb.active);\n      // Set the separator on all but the last breadcrumb\n      for (const breadcrumb of breadcrumbs) {\n        // The only time the last breadcrumb changes is when\n        // itemsAfterCollapse is set to 0, in this case the\n        // last breadcrumb will be the collapsed indicator\n        const last = maxItems !== undefined && itemsAfterCollapse === 0 ? breadcrumb === breadcrumbs[itemsBeforeCollapse] : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n        breadcrumb.last = last;\n        // If the breadcrumb has defined whether or not to show the\n        // separator then use that value, otherwise check if it's the\n        // last breadcrumb\n        const separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n        breadcrumb.separator = separator;\n        // If there is not an active breadcrumb already\n        // set the last one to active\n        if (!active && last) {\n          breadcrumb.active = true;\n          this.activeChanged = true;\n        }\n      }\n    };\n    this.getBreadcrumbs = () => {\n      return Array.from(this.el.querySelectorAll('ion-breadcrumb'));\n    };\n    this.slotChanged = () => {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    };\n    this.collapsed = undefined;\n    this.activeChanged = undefined;\n    this.color = undefined;\n    this.maxItems = undefined;\n    this.itemsBeforeCollapse = 1;\n    this.itemsAfterCollapse = 1;\n  }\n  onCollapsedClick(ev) {\n    const breadcrumbs = this.getBreadcrumbs();\n    const collapsedBreadcrumbs = breadcrumbs.filter(breadcrumb => breadcrumb.collapsed);\n    this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), {\n      collapsedBreadcrumbs\n    }));\n  }\n  maxItemsChanged() {\n    this.resetActiveBreadcrumb();\n    this.breadcrumbsInit();\n  }\n  componentWillLoad() {\n    this.breadcrumbsInit();\n  }\n  render() {\n    const {\n      color,\n      collapsed\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: '18ffba1642f10cc2bc31440e84f23aa6f042e501',\n      class: createColorClasses(color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'breadcrumbs-collapsed': collapsed\n      })\n    }, h(\"slot\", {\n      key: '3db6d31590e3047889ce554d57d155c8ea2e1455',\n      onSlotchange: this.slotChanged\n    }));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"maxItems\": [\"maxItemsChanged\"],\n      \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n      \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: IonBreadcrumbsIosStyle0,\n      md: IonBreadcrumbsMdStyle0\n    };\n  }\n}, [33, \"ion-breadcrumbs\", {\n  \"color\": [513],\n  \"maxItems\": [2, \"max-items\"],\n  \"itemsBeforeCollapse\": [2, \"items-before-collapse\"],\n  \"itemsAfterCollapse\": [2, \"items-after-collapse\"],\n  \"collapsed\": [32],\n  \"activeChanged\": [32]\n}, [[0, \"collapsedClick\", \"onCollapsedClick\"]], {\n  \"maxItems\": [\"maxItemsChanged\"],\n  \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n  \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-breadcrumbs\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-breadcrumbs\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Breadcrumbs);\n        }\n        break;\n    }\n  });\n}\nconst IonBreadcrumbs = Breadcrumbs;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonBreadcrumbs, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}