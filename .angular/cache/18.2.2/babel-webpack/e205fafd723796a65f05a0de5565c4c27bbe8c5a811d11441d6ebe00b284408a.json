{"ast":null,"code":"import _asyncToGenerator from \"D:/Heart/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, Build, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nconst splitPaneIosCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));--side-min-width:270px;--side-max-width:28%}\";\nconst IonSplitPaneIosStyle0 = splitPaneIosCss;\nconst splitPaneMdCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));--side-min-width:270px;--side-max-width:28%}\";\nconst IonSplitPaneMdStyle0 = splitPaneMdCss;\n\n// TODO(FW-2832): types\nconst SPLIT_PANE_MAIN = 'split-pane-main';\nconst SPLIT_PANE_SIDE = 'split-pane-side';\nconst QUERY = {\n  xs: '(min-width: 0px)',\n  sm: '(min-width: 576px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 992px)',\n  xl: '(min-width: 1200px)',\n  never: ''\n};\nconst SplitPane = /*@__PURE__*/proxyCustomElement(class SplitPane extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionSplitPaneVisible = createEvent(this, \"ionSplitPaneVisible\", 7);\n    this.visible = false;\n    this.contentId = undefined;\n    this.disabled = false;\n    this.when = QUERY['lg'];\n  }\n  visibleChanged(visible) {\n    this.ionSplitPaneVisible.emit({\n      visible\n    });\n  }\n  /**\n   * @internal\n   */\n  isVisible() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return Promise.resolve(_this.visible);\n    })();\n  }\n  connectedCallback() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // TODO: connectedCallback is fired in CE build\n      // before WC is defined. This needs to be fixed in Stencil.\n      if (typeof customElements !== 'undefined' && customElements != null) {\n        yield customElements.whenDefined('ion-split-pane');\n      }\n      _this2.styleMainElement();\n      _this2.updateState();\n    })();\n  }\n  disconnectedCallback() {\n    if (this.rmL) {\n      this.rmL();\n      this.rmL = undefined;\n    }\n  }\n  updateState() {\n    if (!Build.isBrowser) {\n      return;\n    }\n    if (this.rmL) {\n      this.rmL();\n      this.rmL = undefined;\n    }\n    // Check if the split-pane is disabled\n    if (this.disabled) {\n      this.visible = false;\n      return;\n    }\n    // When query is a boolean\n    const query = this.when;\n    if (typeof query === 'boolean') {\n      this.visible = query;\n      return;\n    }\n    // When query is a string, let's find first if it is a shortcut\n    const mediaQuery = QUERY[query] || query;\n    // Media query is empty or null, we hide it\n    if (mediaQuery.length === 0) {\n      this.visible = false;\n      return;\n    }\n    // Listen on media query\n    const callback = q => {\n      this.visible = q.matches;\n    };\n    const mediaList = window.matchMedia(mediaQuery);\n    // TODO FW-5869\n    mediaList.addListener(callback);\n    this.rmL = () => mediaList.removeListener(callback);\n    this.visible = mediaList.matches;\n  }\n  /**\n   * Attempt to find the main content\n   * element inside of the split pane.\n   * If found, set it as the main node.\n   *\n   * We assume that the main node\n   * is available in the DOM on split\n   * pane load.\n   */\n  styleMainElement() {\n    if (!Build.isBrowser) {\n      return;\n    }\n    const contentId = this.contentId;\n    const children = this.el.children;\n    const nu = this.el.childElementCount;\n    let foundMain = false;\n    for (let i = 0; i < nu; i++) {\n      const child = children[i];\n      const isMain = contentId !== undefined && child.id === contentId;\n      if (isMain) {\n        if (foundMain) {\n          console.warn('split pane cannot have more than one main node');\n          return;\n        } else {\n          setPaneClass(child, isMain);\n          foundMain = true;\n        }\n      }\n    }\n    if (!foundMain) {\n      console.warn('split pane does not have a specified main node');\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'd54c356cd4bff7e55325160882dea8249f47f388',\n      class: {\n        [mode]: true,\n        // Used internally for styling\n        [`split-pane-${mode}`]: true,\n        'split-pane-visible': this.visible\n      }\n    }, h(\"slot\", {\n      key: 'af62690d0fd686cfbd29d888c79eda9001f13e2f'\n    }));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"visible\": [\"visibleChanged\"],\n      \"disabled\": [\"updateState\"],\n      \"when\": [\"updateState\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: IonSplitPaneIosStyle0,\n      md: IonSplitPaneMdStyle0\n    };\n  }\n}, [33, \"ion-split-pane\", {\n  \"contentId\": [513, \"content-id\"],\n  \"disabled\": [4],\n  \"when\": [8],\n  \"visible\": [32],\n  \"isVisible\": [64]\n}, undefined, {\n  \"visible\": [\"visibleChanged\"],\n  \"disabled\": [\"updateState\"],\n  \"when\": [\"updateState\"]\n}]);\nconst setPaneClass = (el, isMain) => {\n  let toAdd;\n  let toRemove;\n  if (isMain) {\n    toAdd = SPLIT_PANE_MAIN;\n    toRemove = SPLIT_PANE_SIDE;\n  } else {\n    toAdd = SPLIT_PANE_SIDE;\n    toRemove = SPLIT_PANE_MAIN;\n  }\n  const classList = el.classList;\n  classList.add(toAdd);\n  classList.remove(toRemove);\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-split-pane\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-split-pane\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, SplitPane);\n        }\n        break;\n    }\n  });\n}\nconst IonSplitPane = SplitPane;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonSplitPane, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}